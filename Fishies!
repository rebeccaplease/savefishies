
int frameSize = 500;
float sky = 0;

int score =  0;

//initial squid position
float squidPosX = frameSize/2;
float squidPosY = frameSize/2;

float squidSize = 50;

float squidVelX = 6;
float squidVelY = 6;

//initial velocity
float v = 6;

//detect if key still pressed
boolean keyup = false;
boolean keyright = false;
boolean keyleft = false;
boolean keydown = false;

//records how long the key is pressed
int timeUp = 0;
int timeDown = 0;
int timeLeft = 0;
int timeRight = 0;

boolean lose = false;

Fish[] fish = new Fish[10];
Hook[] hook = new Hook[3];
int level = 1; //total number of fish will be from 1 to level

int fishCaught = 0; //number of fish caught by the hooks
String x = "Strikes: "; //display strikes
//images
PImage squid;
PImage nemoLeft;
PImage nemoRight;
PImage wormhook;
PImage whaleLeft;
PImage whaleRight;
Fish whale;


//static public void main(String args[]) {
//  PApplet.main("Save_the_Fish");
//}

void setup()
{
  size(frameSize, frameSize);
  textSize(20);
  ellipseMode(RADIUS);
  for (int k = 0; k < 10; k++)  //fill fish array
  { 
    fish[k] = new Fish();
  }
  for (int a = 0; a < 3; a++) //fill hook array
  {
    hook[a] = new Hook();
  }
  squid = loadImage("squid.png");
  nemoLeft = loadImage("greenNemoLeft.png");
  nemoRight = loadImage("greenNemoRight.png");
  wormhook = loadImage("hook.png");
  whaleLeft = loadImage("whaleLeft.gif");
  whaleRight = loadImage("whaleRight.png");
  whale = new Fish();
  whale.whale();
}

void draw()
{
  if (!lose)
  {
    //background color
    background(#33F2F9);
    noStroke();
    fill(#FFFFFF);
    rect(0, 0, frameSize, sky); 

    imageMode(CENTER);

    //scoreboard, change font
    fill(#000000);
    text("Score: " + score, 10, frameSize - 10 );

    //squid!
    fill(#5D209A);
    //ellipse(squidPosX, squidPosY, squidSize, squidSize);
    image(squid, squidPosX, squidPosY, squidSize, squidSize);

    //lines/hooks!
    stroke(1);

    //fish!
    fill(#00FF00);

    // if (score < 1) 
    //{
    for (int a = 0; a < level; a++) //draw level number of fish
    { 
      //draw fish
      fish[a].move();
      if (fish[a].endOfLine()) //if reaches edge of screen
      {
        fish[a].change(); //change location
        if (level < 10)
          level++;
      }
    }
    for (int b = 0; b < 3; b++) {
      for (int c = 0; c < level; c++)
      {
        if (eaten(hook[b], fish[c])) 
          catchFish(hook[b], fish[c]); 
        //else
        //fish[c].free();
      } 
      hook[b].move();
      squidCollision(hook[b]);
    }
    fill(#000000);
    text(x, frameSize/2, frameSize - 10);
  }

  if(score == 3)
  {
    fill(#4C0099);
    whale.move();
    //ellipse(whale.getX(), whale.getY(), whale.getWidth(), whale.getLength());
    if (whale.endOfLine())
    {
      whale.delete();
    }
    for (int b = 0; b < 3; b++) {
      if (eaten(hook[b], whale))
        catchFish(hook[b], whale); 
      //else
      //fish[c].free();
      hook[b].move();
      squidCollision(hook[b]);

      if (eaten(hook[b], whale))
      {
        catchFish(hook[b], whale);
      }
    }
    text(x, frameSize/2, frameSize - 10);
  }

  else if (lose) //if game over, 3 strikes
  {
    noStroke();
    fill(#000000);

    text("Game Over!\nBetter luck next time.\nPress ENTER to play again.", frameSize/2-75, frameSize/2);
  }
}



//move squid. the longer each key is held down, the faster it moves

void keyPressed() {
  if (key == CODED)
  {
    if (keyCode == UP || keyup) 
    {
      squidVelY = v + timeUp * 0.1;
      if (squidPosY - squidVelY < sky + squidSize/2) //if it will move past the top border
        squidPosY = sky + squidSize/2; //set position to touching the top border
      else 
        squidPosY -= squidVelY;
      keyup = true;
      timeUp++;
    } 
    if (keyCode == DOWN || keydown) 
    {
      squidVelY = v + timeDown * 0.1;  
      if (squidPosY + squidVelY > frameSize - squidSize/2) //if it will move past the bottom border
        squidPosY = frameSize - squidSize/2; //set position to touching the bottom border
      else
        squidPosY += squidVelY;
      keydown = true;
      timeDown++;
    }
    if (keyCode == LEFT || keyleft)
    {
      squidVelX = v + timeLeft * 0.1; 
      if (squidPosX - squidVelX < squidSize/2) //if it will move past the border
        squidPosX = squidSize/2; //set position to touching the left border
      else
        squidPosX -= squidVelX;
      keyleft = true;
      timeLeft++;
    }
    if (keyCode == RIGHT || keyright)
    {
      squidVelX = v + timeRight * 0.1; 
      if (squidPosX + squidVelX > frameSize - squidSize/2) //if it will move past the border
        squidPosX = frameSize - squidSize/2; //set position to touching right border
      else
        squidPosX += squidVelX;
      keyright = true;
      timeRight++;
    }
  }
  if (keyCode == ENTER) 
  { //reset
    score = 0;
    x = "Strikes: ";
    fishCaught = 0;
    level = 1;
    lose = false;


    //reset fish/hook arrays
    for (int k = 0; k < 10; k++)  //fill fish array
    { 
      fish[k] = new Fish();
    }
    for (int a = 0; a < 3; a++) //fill hook array
    {
      hook[a] = new Hook();
    }
    draw();
  }
}

void keyReleased() {
  if (key == CODED) 
  {
    if (keyCode == UP) {
      keyup = false; 
      timeUp = 0;
    }
    if (keyCode == DOWN) {
      keydown = false; 
      timeDown = 0;
    }
    if (keyCode == LEFT) {
      keyleft = false; 
      timeLeft = 0;
    }
    if (keyCode == RIGHT) {
      keyright = false; 
      timeRight = 0;
    }
  }
}

class Fish {
  float fWidth = random(20, 40) ;
  float fLength = fWidth * 0.5;  
  float fX = int(random(2)) * frameSize; //random int, 0 or 1. starting at left or right
  float fY = random(sky + 100, frameSize-100); //stays constant while it moves across the screen
  float fVx = random(0.5, 1.0); 
  float fVy = 0;

  boolean caught = false;
  boolean whale = false;

  Fish() {
    if (fX > 0)
      fVx *= -1;
  }

  void change() {
    fX = int(random(2)) * frameSize;
    fY = random(sky + 100, frameSize-100);
    fVx = random(0.4, 0.6); 
    if (fX > 0) //if starting on the right side, move to the left
      fVx *= -1;
    fVy = 0;
    caught = false;
  }

  boolean endOfLine() {
    if (fX < 0 || fX > frameSize)
    {
      score++;
      return true;
    }
    return false;
  }

  void move() {
    //ellipse(fX, fY, fWidth, fLength);
    if(!whale)
    {
    if (fVx > 0) //right facing fish
      image(nemoRight, fX, fY, fWidth, fLength);
    else //left facing fish
    image(nemoLeft, fX, fY, fWidth, fLength);
    }
    else 
    {
      if (fVx > 0)
    image(whaleRight, fX, fY, fWidth, fLength);
    else
    image(whaleLeft, fX, fY, fWidth, fLength);
    }
    if (!caught) //if it's not caught, keep moving
      fX += fVx;
    else
    {
      fY += fVy;
      if (fY <= sky) //if the fish is brought to the top, reset
      {
        fishCaught++; //increment the number of fish caught
        change();
        x += "X "; //add x to be displayed
        if (fishCaught >=3)
          lose = true;
      }
    }
  }

  float getX() {
    return fX;
  }

  float getY() {
    return fY;
  }
  float getWidth() {
    return fWidth;
  }
  float getLength() {
    return fLength;
  }
  void rise(float vY) {
    caught = true;
    fVy = -vY;
  }
  void free() { //reset caught if squid gets hook
    caught = false;
  }
  void whale() {
    fY = frameSize - 100;
    fX = int(random(2)) * frameSize; //random int, 0 or 1. starting at left or right

    fWidth = frameSize/3 ;
    fLength = fWidth * 0.8;  

    fVx = random(0.5, 0.8); 
    if (fX > 0)
      fVx *= -1;
    fVy = 0;
    whale = true;
  }
  void delete() {
    fWidth = 0;
    fLength = 0; 
    fVx = 0;
  }
}

class Hook {
  float hookX = random(50, frameSize-50);
  float hookY = sky;
  float endY = random(sky + 100, frameSize-50);

  float vY = random(.5, 1.5); //random velocity

  boolean drawHook = true; //draw hook by default

  void move() {
    if (hookY < endY) { //if the length is less than the endpoint
      hookY += vY;    //keep moving
      line(hookX, sky, hookX, hookY); //x stays same, y from sky to next pos
      noFill();
      if (drawHook)
        //arc(hookX, hookY-20, 20, 20, 0, HALF_PI, OPEN);
        image(wormhook, hookX, hookY, 20, 20);
    } 
    else { //after it reaches the endpoint
      endY = sky; //change endY to sky
      hookY -= vY;
      line(hookX, sky, hookX, hookY); 
      noFill();
      if (drawHook) //draw hook if squid hasnt touched
        //arc(hookX, hookY-20, 20, 20, 0, HALF_PI, OPEN);
        image(wormhook, hookX, hookY, 20, 20);

      if ( hookY <= endY) //if reaches sky again
      { //reset to new x pos. draw down again
        endY = random(sky + 50, frameSize-50);
        hookX =  random(50, frameSize-50);
        drawHook = true;
        vY = random(.5, 1.5);
      }
    }
  }
  float getX() {
    return hookX;
  }
  float getY() {
    return hookY;
  } 
  void delete() { //delete hook if squid touches
    drawHook = false;
  }
  boolean hasHook() {
    return drawHook;
  }
  float getV() {
    return vY;
  }
  void rise() //go back up if it catches a fish
  {
    endY = hookY;
  }
}

boolean squidCollision(Hook h) { //if squid touches hook
  if (abs(squidPosX - h.getX()) < squidSize/2 && abs(squidPosY - h.getY()) < squidSize/2)
  {
    h.delete();
    return true;
  }
  return false;
}

boolean eaten(Hook h, Fish f) {//hook and fish collsion. if hook exists
  if (abs(f.getX() - h.getX()) < f.getWidth()/2 && abs(f.getY() - h.getY()) < f.getLength()/2 && h.hasHook()) 
    return true;
  return false;
}

void catchFish(Hook h, Fish f) //squid can still save if it touches the hook
{
  h.rise();
  f.rise(h.getV());
}
