
int frameSize = 400;
int sky = 75;

int score =  0;

//initial squid position
float squidPosX = frameSize/2;
float squidPosY = frameSize/2;

float squidSize = 10;

float squidVelX = 6;
float squidVelY = 6;

//initial velocity
float v = 4;

//detect if key still pressed
boolean keyup = false;
boolean keyright = false;
boolean keyleft = false;
boolean keydown = false;

//records how long the key is pressed
int timeUp = 0;
int timeDown = 0;
int timeLeft = 0;
int timeRight = 0;

//for drawing line
float hookX = random(50, frameSize-50);
float hookY = (float)sky;
float endY = random(sky + 50, frameSize-50);
float hookYsecond = endY; //to draw the line back up to beginning Y

float vX = .5;
float vY = random(.5, 1.5); //random velocity

//for fish!
float fishX = int(random(2)) * frameSize; //random int, 0 or 1. starting at left or right
float fishY = random(sky + 100, frameSize-100); //stays constant while it moves across the screen
float fishWidth = random(5, 20) ;
float fishLength = fishWidth * 0.5;

float fishV = random(0.3,0.6);

void setup()
{
  size(frameSize, frameSize);
  textSize(20);
  ellipseMode(RADIUS);
  if(fishX > 0)
  fishV *= -1;
}

void draw()
{
  //background color
  background(#33F2F9);
  noStroke();
  fill(#FFFFFF);
  rect(0, 0, frameSize, sky); 
  
  //scoreboard, change font
  fill(#000000);
  text("Score: " + score, 10, frameSize - 10 );
  
  //squid!
  fill(#5D209A);
  ellipse(squidPosX, squidPosY, squidSize, squidSize);
  
 //lines/hooks!
  stroke(1);

if (hookY < endY) { //if the length is less than the endpoint
    hookY += vY;    //keep moving
    line(hookX, sky, hookX, hookY); //x stays same, y from sky to next pos
    noFill();
    arc(hookX, hookY-20, 20, 20, 0, HALF_PI, OPEN);
  } 
  else { //after it reaches the endpoint
    endY = sky; //change endY to sky
    hookY -= vY;
    line(hookX, sky, hookX, hookY); 
    noFill();
    arc(hookX, hookY-20, 20, 20, 0, HALF_PI, OPEN);

    if( hookY <= endY) //if reaches sky again
    { //reset to new x pos. draw down again
      endY = random(sky + 50, frameSize-50);
      hookX =  random(50, frameSize-50);
    }
  }


//fish!
fill(#00FF00);



ellipse(fishX, fishY, fishWidth, fishLength); //draw fish

if(fishX > 0 || fishX < frameSize)
  fishX += fishV;
  
  //if(fishscore)
  //score++;




}

//move squid. the longer each key is held down, the faster it moves

void keyPressed() {
  if (key == CODED)
  {
    if (keyCode == UP || keyup) 
    {
      squidVelY = v + timeUp * 0.1;
        if(squidPosY - squidVelY < sky + squidSize) //if it will move past the top border
          squidPosY = sky + squidSize; //set position to touching the top border
        else 
          squidPosY -= squidVelY;
      keyup = true;
      timeUp++;
    } 
     if (keyCode == DOWN || keydown) 
    {
      squidVelY = v + timeDown * 0.1;  
        if(squidPosY + squidVelY > frameSize - squidSize) //if it will move past the bottom border
          squidPosY = frameSize - squidSize; //set position to touching the bottom border
        else
          squidPosY += squidVelY;
      keydown = true;
      timeDown++;
    }
     if(keyCode == LEFT || keyleft)
    {
      if(squidPosX > squidSize/2)
      {
      squidVelX = v + timeLeft * 0.1; 
        if(squidPosX - squidVelX < squidSize) //if it will move past the border
          squidPosX = squidSize; //set position to touching the left border
        else
          squidPosX -= squidVelX;
      keyleft = true;
      timeLeft++;
      }
    }
     if(keyCode == RIGHT || keyright)
    {
      squidVelX = v + timeRight * 0.1; 
        if(squidPosX + squidVelX > frameSize - squidSize) //if it will move past the border
          squidPosX = frameSize - squidSize; //set position to touching right border
        else
          squidPosX += squidVelX;
      keyright = true;
      timeRight++;
    }
  }
}
 
void keyReleased() {
  if (key == CODED) 
  {
    if (keyCode == UP) {
      keyup = false; 
      timeUp = 0;
    }
    if (keyCode == DOWN) {
      keydown = false; 
      timeDown = 0;
    }
    if (keyCode == LEFT) {
      keyleft = false; 
      timeLeft = 0;
    }
    if (keyCode == RIGHT) {
      keyright = false; 
      timeRight = 0;
    }
  }
}
